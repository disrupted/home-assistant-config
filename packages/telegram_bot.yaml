homeassistant:
  customize_glob:
    automation.telegram_*:
      icon: mdi:telegram
  customize:
    sensor.telegram_chat_id:
      hidden: true
      icon: mdi:telegram

sensor:
  - platform: template
    sensors:
      telegram_chat_id:
        friendly_name: "Telegram Chat ID"
        value_template: !secret telegram_chat_id

mqtt:
  binary_sensor:
    - state_topic: "telegram/disrupted/online"
      name: Telegram Online
    - state_topic: "telegram/polina/online"
      name: Telegram Online Polina

telegram_bot:
  - platform: polling
    api_key: !secret api_key_telegram
    parse_mode: html
    allowed_chat_ids:
      - !secret telegram_chat_id

notify:
  - platform: telegram
    name: Telegram
    chat_id: !secret telegram_chat_id

automation:
  - alias: Telegram_bot text incoming
    id: telegram_bot_text_incoming
    trigger:
      platform: event
      event_type: telegram_text
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_id
          message: >
            message from [{{ trigger.event.data.from_first }}](tg://user?id={{ trigger.event.data.user_id }}) ({{ trigger.event.data.user_id }}):

            {{ trigger.event.data.text }}

            -----------

            event data:

            first: {{ trigger.event.data.from_first }}

            last: {{ trigger.event.data.from_last }}

            userid: {{ trigger.event.data.user_id }}

            chatid: {{ trigger.event.data.chat_id }}

            chat: {{ trigger.event.data.chat }}

  - alias: Telegram_bot command incoming
    id: telegram_bot_command_incoming
    trigger:
      platform: event
      event_type: telegram_command
    condition:
      condition: template
      value_template: "{{ trigger.event.data.user_id != states('sensor.telegram_chat_id') | int }}"
    action:
      - service: telegram_bot.send_message
        data_template:
          target: !secret telegram_chat_id
          parse_mode: html
          message: >
            <a href="tg://user?id={{ trigger.event.data.user_id }}">{{ trigger.event.data.from_first }}{{ trigger.event.data.from_last }}</a> ({{ trigger.event.data.user_id }}) requested {{ trigger.event.data.command }} {% if trigger.event.data.args|length > 0 %}{% for state in trigger.event.data["args"] %}{{ state }} {% endfor %}{% endif %}at {{ states("sensor.time") }}{% if trigger.event.data.chat_id != trigger.event.data.user_id %} from a <a href="tg://user?id={{ trigger.event.data.chat_id }}">different chat {{ trigger.event.data.chat }}</a> ({{ trigger.event.data.chat_id }}){% endif %}.

          # {% if trigger.event.data.args|length > 0 %}args: {% for state in trigger.event.data["args"] %}{{ state }} {% endfor %}
          # {% endif }
          # {% for state in trigger.event.data %} {{ state }} {% endfor %}

  - alias: Telegram_bot that replies pong to ping
    id: telegram_bot_test_ping_pong
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/ping"
    action:
      - service: telegram_bot.send_message
        data_template:
          target: "{{ trigger.event.data.user_id }}"
          message: "pong"

  - alias: Telegram_bot people
    id: telegram_bot_people
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/people"
    action:
      - service: telegram_bot.send_message
        data_template:
          title: "people at home:"
          message: >-
            {% for entity in states.group.all_people.attributes.entity_id if is_state(entity, 'home') %}{% set parts = entity.split('.') -%}
              - {{ states[parts[0]][parts[1]].name }}{% if parts[0] != "person" %} ({{ parts[1] }}){% endif %}
            {%- if not loop.last -%}
            {{ '\n' }}
            {%- endif -%}
            {% else -%}
              no one is at home.
            {% endfor %}

          # {{ states[parts[0]][parts[1]].last_changed }}

  - alias: Telegram_bot camera
    id: telegram_bot_camera
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/camera"
    action:
      # - service: telegram_bot.send_message
      #   data_template:
      #     message: >
      #       Message from {{ trigger.event.data["from_first"] }}. {% for state in trigger.event.data["args"] %} {{ state }} {% endfor %}
      # - service: telegram_bot.send_photo
      #   data_template:
      #     target: !secret telegram_chat_id
      #     file: /share/motion/lastsnap.jpg
      #     caption: 'USB Webcam'
      # - service: telegram_bot.send_photo
      #   data_template:
      #     target: !secret telegram_chat_id
      #     url: !secret android_ip_webcam_photo_url
      #     username: !secret android_ip_webcam_username
      #     password: !secret android_ip_webcam_password
      #     caption: >
      #       Live from home

      #       battery: {{ states("sensor.ip_webcam_battery_level") | int }}%

      #       motion: {{ states("sensor.ip_webcam_motion") | int }}

      #       {% if is_state("switch.ip_webcam_night_vision", "on") %}night vision on{% endif %}
      # - service: script.webcam_send_photo
      #   data_template:
      #     caption: >
      #       Live from home

      #       battery: {{ states("sensor.ip_webcam_battery_level") | int }}%

      #       motion: {{ states("sensor.ip_webcam_motion") | int }}

      #       {% if is_state("switch.ip_webcam_night_vision", "on") %}night vision on{% endif %}
      - service: camera.snapshot
        data:
          entity_id: camera.xiaofang
          filename: "/config/www/cam/snapshot.jpg"
      # - delay: '00:00:01'
      - service: telegram_bot.send_photo
        data_template:
          target: !secret telegram_chat_id
          file: "/config/www/cam/snapshot.jpg"

  - alias: Telegram_bot toggle present
    id: telegram_bot_toggle_present
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/present"
    condition:
      condition: template
      value_template: "{{ trigger.event.data.user_id == states('sensor.telegram_chat_id') | int }}"
    action:
      - service: input_boolean.toggle
        entity_id: input_boolean.present
      - service: notify.telegram
        data_template:
          message: "present: {{ states('input_boolean.present') }}"

  - alias: Telegram_bot turn on
    id: telegram_bot_turn_on
    trigger:
      platform: event
      event_type: telegram_command
      event_data:
        command: "/on"
    condition:
      condition: template
      value_template: "{{ trigger.event.data.user_id == states('sensor.telegram_chat_id') | int }}"
    action:
      - service: telegram_bot.send_message
        data_template:
          parse_mode: html
          message: "now send me the entity_id you want to turn on"

  - alias: Telegram_bot IP
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: "/ip"
      - platform: state
        entity_id: sensor.wan_ip
    condition:
      - condition: template
        value_template: "{{ states('sensor.wan_ip') not in ['unknown', 'unavailable'] }}"
    action:
      - service: notify.telegram
        data_template:
          message: >
            {{ states('sensor.wan_ip') }}

            since {{ as_timestamp(states.sensor.wan_ip.last_changed) | timestamp_custom('%d.%m. %H:%M') }} (for {{ relative_time(states.sensor.wan_ip.last_changed) }})

  - alias: Telegram_bot plants
    trigger:
      - platform: event
        event_type: telegram_command
        event_data:
          command: "/plants"
    action:
      - service: telegram_bot.send_message
        data_template:
          target:
            - !secret telegram_chat_id
            - !secret telegram_chat_id_polina
          parse_mode: html
          message: >
            {%- for plant in states.plant -%}
              <b>{{ plant.attributes.friendly_name }}</b>
              {%- set data = namespace(problems=[]) %}
              {%- for problem in plant.attributes.problem.split(', ') if ((problem not in ['none','brightness low'])) -%}
                {%- set data.problems = data.problems + [problem] -%}
              {%- endfor %}
              {%- if data.problems | length > 0 -%}
                {%- if 'moisture low' in data.problems -%}
                {{ '\n- Moisture ' }}{{ states[plant.attributes.sensors.moisture].state_with_unit -}}
                {% endif %}
                {%- if 'conductivity low' in data.problems -%}
                {{ '\n- Conductivity ' }}{{ states[plant.attributes.sensors.conductivity].state_with_unit -}}
                {{ '\n   '}}needs at least {{ (350 / states(plant.attributes.sensors.conductivity) | int * 100 - 100) | round }}% more fertilizer
                  {%- if not 'moisture low' in data.problems and states(plant.attributes.sensors.moisture) | int > 30 -%}
                    {{ '\n   Moisture is at ' }}{{ states(plant.attributes.sensors.moisture) }}% though so don't water it too much
                  {% endif %}
                {% endif %}
                {%- if 'brightness low' in data.problems and state_attr('sun.sun', 'elevation')|float < 20 %}
                {% endif %}
              {%- else -%}
                {{ '\n  ' }}<i>all good</i> {{ "\U0001f33f" }}
              {% endif %}
            {% endfor %}
