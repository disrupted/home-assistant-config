homeassistant:
  customize_glob:
    automation.light_adaptive_*:
      icon: mdi:theme-light-dark
    automation.sunrise_*:
      icon: mdi:weather-sunset-up
    automation.sunset_*:
      icon: mdi:weather-sunset-down
  customize:
    sensor.adaptive_colortemp:
      icon: mdi:theme-light-dark
    light.floor_lamp:
      icon: mdi:floor-lamp
    light.bedroom_ceiling:
      icon: mdi:ceiling-light
    light.kitchen_ceiling:
      icon: mdi:ceiling-light
    light.bathroom_ceiling:
      icon: mdi:ceiling-light
    light.bedside_lamp:
      icon: mdi:webcam
    light.reading_lamp:
      icon: mdi:desk-lamp
    light.spots:
      icon: mdi:spotlight-beam
    light.desk_lamp:
      icon: mdi:desk-lamp
    light.candle:
      icon: mdi:candle

light:
  - platform: group
    name: All
    entities:
      - light.livingroom
      - light.bedroom
      - light.bathroom
      - light.kitchen
      - light.desk_lamp
      - light.corridor_ceiling
      - light.storage_ceiling
  - platform: group
    name: Livingroom
    entities:
      - light.floor_lamp
      - light.reading_lamp
      - light.spots
  - platform: group
    name: Kitchen
    entities:
      - light.kitchen_ceiling
  - platform: group
    name: Bathroom
    entities:
      - light.bathroom_ceiling
  - platform: group
    name: Bedroom
    entities:
      - light.bedroom_ceiling

# prettier-ignore
sun:

sensor:
  - platform: history_stats
    name: Lights ON today
    entity_id: light.livingroom
    state: "on"
    type: time
    start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
    end: "{{ now() }}"
  - platform: template
    sensors:
      adaptive_colortemp:
        friendly_name: "Adaptive Colortemp"
        unit_of_measurement: "mired"
        value_template: "{{ state_attr('switch.adaptive_lighting_default', 'color_temp_mired') }}"

automation:
  - id: light_adaptive_apply
    alias: Light Adaptive apply
    trigger:
      # when this automation is turned on
      - platform: state
        entity_id: automation.light_adaptive_apply
        from: "off"
        to: "on"
      - platform: time_pattern
        minutes: "/10"
      - platform: homeassistant
        event: start
      - platform: state
        entity_id:
          # - light.bedroom_ceiling
          - light.desk_lamp
          - light.floor_lamp
          - light.spots
          - light.reading_lamp
        from: "off"
        to: "on"
        for:
          seconds: 1
    # condition:
    #   - condition: state
    #     entity_id:
    #       - switch.adaptive_lighting_bed
    #       - switch.adaptive_lighting_desk
    #       - switch.adaptive_lighting_floor
    #     state: "off"
    action:
      - service: script.adaptive_lighting
        data:
          entities:
            - light.desk_lamp
            - light.floor_lamp
            - light.spots
            - light.reading_lamp
          transition: 10

  # - alias: Light Sunrise adaptive
  #   trigger:
  #     - platform: sun
  #       event: sunrise
  #       # offset: "-01:00:00"
  #   action:
  #     - service: switch.turn_on
  #       entity_id:
  #         - switch.adaptive_lighting_floor
  #         - switch.adaptive_lighting_bed
  #         - switch.adaptive_lighting_desk

  - alias: Light Sunset
    trigger:
      platform: sun
      event: sunset
      offset: "-01:30:00"
      # platform: numeric_state
      # entity_id: sun.sun
      # value_template: '{{ state.attributes.elevation }}'
      # below: 5
    condition:
      - condition: state
        entity_id: input_boolean.present
        state: "on"
      # - condition: template
      #   value_template: >
      #     {{ is_state('light.floor_lamp', 'off') or is_state('light.reading_lamp', 'off') or is_state('light.spots', 'off') or is_state('light.desk_lamp', 'off') }}
    action:
      - choose:
          - alias: "IF working at the desk, turn on the desk lamp"
            conditions:
              - condition: state
                entity_id: light.desk_lamp
                state: "off"
              - condition: state
                entity_id: binary_sensor.disrupted_mba_at_desk
                state: "on"
              - condition: state
                entity_id: binary_sensor.disrupted_mba_active
                state: "on"
            sequence:
              - service: scene.turn_on
                data:
                  entity_id: scene.sunset_desk
                  transition: 5
      - choose:
          - alias: "IF livingroom light isn't already on, turn it on"
            conditions:
              - condition: state
                entity_id: light.livingroom
                state: "off"
            sequence:
              # - service: scene.turn_on
              #   entity_id: scene.sunset
              - service: script.scene
                data:
                  scene: sunset
                  transition: 10
      #  - service: script.adaptive_lighting
      #  data:
      #  turn_on: true
      #  entities:
      #  - light.desk_lamp
      #  - light.floor_lamp
      #  - light.spots
      #  - light.reading_lamp
      #  transition: 10

  - alias: Light Sunset lightchain
    trigger:
      - platform: numeric_state
        entity_id: sun.sun
        value_template: "{{ state.attributes.elevation }}"
        below: -4.0
        # above: -8.0
      # - platform: sun
      #   event: sunset
      #   offset: "+01:00:00"
    condition:
      - condition: template
        value_template: '{{ is_state_attr("sun.sun", "rising", False) }}'
      - condition: state
        entity_id: input_boolean.away
        state: "off"
      # - condition: state
      #   entity_id: input_boolean.sleeping
      #   state: 'off'
    action:
      service: homeassistant.turn_on
      entity_id:
        - light.string
        - switch.christmas_star

  - alias: Light Sunrise lightchain
    trigger:
      - platform: time
        at: "02:00:00"
      - platform: numeric_state
        entity_id: sun.sun
        value_template: "{{ state.attributes.elevation }}"
        above: -4.0
      - platform: state
        entity_id: input_boolean.sleeping
        to: "on"
        for:
          minutes: 30
    action:
      service: homeassistant.turn_off
      entity_id:
        - light.string
        - switch.christmas_star

  - alias: Bedroom Light switch sleep
    trigger:
      - platform: device
        device_id: 5a368b41974c29a5a5d1928090bd78ec
        domain: zha
        type: remote_button_short_press
        subtype: turn_off
    condition:
      - condition: state
        entity_id: light.bedroom
        state: "off"
    action:
      #  - service: light.turn_off
      #  entity_id: all
      - service: input_boolean.turn_on
        entity_id: input_boolean.sleeping

  - alias: Bedroom Light switch turn off
    trigger:
      - platform: device
        device_id: 5a368b41974c29a5a5d1928090bd78ec
        domain: zha
        type: remote_button_short_press
        subtype: turn_off
    condition:
      - condition: state
        entity_id: light.bedroom
        state: "on"
    action:
      - service: light.turn_off
        entity_id: light.bedroom_ceiling

  - alias: Bedroom Light switch turn on
    trigger:
      - platform: device
        device_id: 5a368b41974c29a5a5d1928090bd78ec
        domain: zha
        type: remote_button_short_press
        subtype: turn_on
    condition:
      - condition: state
        entity_id: light.bedroom
        state: "off"
    action:
      - service: script.light_toggle
        data:
          service: "turn_on"
          entity_id: light.bedroom_ceiling

  - alias: Livingroom Light switch
    use_blueprint:
      path: philips_hue_dimmer_switch.yaml
      input:
        remote: 26e2dec1fe6f42caafb738958bc3b26a
        light:
          entity_id: light.livingroom

  #  - alias: Light switch bed nightlight
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: turn_on
  #  condition:
  #  # - condition: time
  #  #   after: '00:00:00'
  #  #   before: '08:00:00'
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "off"
  #  - condition: state
  #  entity_id: binary_sensor.bayesian_sleeping
  #  state: "on"
  #  # - condition: template
  #  #   value_template: "{{ state_attr('sun.sun', 'elevation') < -10.0 }}"
  #  # - condition: or
  #  #   conditions:
  #  #     - condition: state
  #  #       entity_id: input_boolean.sleeping
  #  #       state: 'on'
  #  #     - condition: state
  #  #       entity_id: light.livingroom
  #  #       state: 'off'
  #  action:
  #  # - service: hue.hue_activate_scene
  #  #   data_template:
  #  #     group_name: 'Bed'
  #  #     scene_name: 'Nightlight'
  #  service: light.turn_on
  #  entity_id: light.bedroom_ceiling
  #  data:
  #  profile: nightlight
  #
  #  - alias: light switch bed daytime
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: turn_on
  #  condition:
  #  # - condition: time
  #  #   after: '00:00:00'
  #  #   before: '08:00:00'
  #  - condition: state
  #  entity_id: binary_sensor.bayesian_sleeping # input_boolean.sleeping
  #  state: "off"
  #  # - condition: and  # 'when light' condition: before sunset and after sunrise - equivalent to a state condition on `sun.sun` of `above_horizon`
  #  #   conditions:
  #  #     - condition: sun
  #  #       before: sunset
  #  #     - condition: sun
  #  #       after: sunrise
  #  - condition: or
  #  conditions:
  #  - condition: template
  #  value_template: "{{ state_attr('sun.sun', 'elevation') > -2.0 }}"
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "on"
  #  action:
  #  # - service: hue.hue_activate_scene
  #  #   data_template:
  #  #     group_name: 'Bed'
  #  #     scene_name: 'Concentrate'
  #  # - service: switch.turn_on
  #  #   entity_id: switch.adaptive_lighting_bed
  #  - service: light.turn_on
  #  data_template:
  #  entity_id: light.bedroom_ceiling
  #  color_temp: "{{ state_attr('switch.adaptive_lighting_default', 'color_temp_mired') | int }}"
  #  brightness_pct: "{{ state_attr('switch.adaptive_lighting_default', 'brightness_pct') | int }}"
  #  transition: 0.5
  #
  #  - alias: light switch bed evening
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: turn_on
  #  condition:
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "off"
  #  # - condition: time
  #  #   after: '00:00:00'
  #  #   before: '08:00:00'
  #  - condition: state
  #  entity_id: binary_sensor.bayesian_sleeping # input_boolean.sleeping
  #  state: "off"
  #  # - condition: or  # 'when light' condition: after sunset and before sunrise - equivalent to a state condition on `sun.sun` of `below_horizon`
  #  #   conditions:
  #  #     - condition: sun
  #  #       after: sunset
  #  #     - condition: sun
  #  #       before: sunrise
  #  - condition: template
  #  value_template: "{{ state_attr('sun.sun', 'elevation') <= -2.0 }}"
  #  action:
  #  # - service: hue.hue_activate_scene
  #  #   data_template:
  #  #     group_name: 'Bed'
  #  #     scene_name: 'Read'
  #  service: light.turn_on
  #  entity_id: light.bedroom_ceiling
  #  data:
  #  profile: reading
  #  transition: 0.5
  #
  #  - alias: light switch bed off
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: turn_off
  #  condition:
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "on"
  #  action:
  #  - service: light.turn_off
  #  entity_id: light.bedroom_ceiling
  #
  #  # - alias: light switch bed going to sleep
  #  #   trigger:
  #  #     - platform: device
  #  #       device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  #       domain: zha
  #  #       type: remote_button_short_press
  #  #       subtype: turn_off
  #  #   condition:
  #  #     - condition: state
  #  #       entity_id: light.livingroom
  #  #       state: 'on'
  #  #     - condition: time
  #  #       after: '00:00:00'
  #  #       before: '08:00:00'
  #  #     # - condition: and  # 'when light' condition: before sunset and after sunrise - equivalent to a state condition on `sun.sun` of `above_horizon`
  #  #     #   conditions:
  #  #     #     - condition: sun
  #  #     #       before: sunset
  #  #     #     - condition: sun
  #  #     #       after: sunrise
  #  #   action:
  #  #     - service: scene.turn_on
  #  #       entity_id: scene.night
  #  #     # - service: input_boolean.turn_on
  #  #     #   entity_id: input_boolean.sleeping
  #
  #  - alias: light switch bed end sleep
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: turn_off
  #  condition:
  #  - condition: state
  #  entity_id: input_boolean.sleeping
  #  state: "on"
  #  - condition: state
  #  entity_id: light.livingroom
  #  state: "off"
  #  # - condition: time
  #  #   after: '00:00:00'
  #  #   before: '08:00:00'
  #  # - condition: and  # 'when light' condition: before sunset and after sunrise - equivalent to a state condition on `sun.sun` of `above_horizon`
  #  #   conditions:
  #  #     - condition: sun
  #  #       before: sunset
  #  #     - condition: sun
  #  #       after: sunrise
  #  action:
  #  - service: input_boolean.turn_off
  #  entity_id: input_boolean.sleeping
  #  - service: notify.ga_broadcast
  #  data:
  #  message: "Sleep cycle finished"
  #
  #  - alias: light switch bed dim up
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: dim_up
  #  condition:
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "on"
  #  - condition: template
  #  value_template: "{{ state_attr('light.bedroom_ceiling', 'brightness') < 254 }}"
  #  action:
  #  - service: light.turn_on
  #  entity_id: light.bedroom_ceiling
  #  data:
  #  brightness_step_pct: 20
  #  transition: 0.5
  #
  #  - alias: light switch bed dim up full
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: dim_up
  #  condition:
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "on"
  #  - condition: template
  #  value_template: "{{ state_attr('light.bedroom_ceiling', 'brightness') >= 254 }}"
  #  action:
  #  - service: light.turn_on
  #  entity_id: light.bedroom_ceiling
  #  data:
  #  flash: short
  #
  #  - alias: light switch bed dim down
  #  trigger:
  #  - platform: device
  #  device_id: 26e2dec1fe6f42caafb738958bc3b26a
  #  domain: zha
  #  type: remote_button_short_press
  #  subtype: dim_down
  #  condition:
  #  - condition: state
  #  entity_id: light.bedroom_ceiling
  #  state: "on"
  #  action:
  #  - service: light.turn_on
  #  entity_id: light.bedroom_ceiling
  #  data:
  #  brightness_step_pct: -20
  #  transition: 0.5

  # BUGGY causes event loop
  # - alias: light desk on
  #   trigger:
  #     # - platform: state
  #     #   entity_id: light.desk_lamp
  #     #   from: 'off'
  #     #   to: 'on'
  #     - platform: event
  #       event_type: call_service
  #       event_data:
  #         domain: light
  #         service: turn_on
  #         service_data:
  #           entity_id: light.desk_lamp
  #   condition:
  #     - condition: template
  #       value_template: "{{ trigger.event.data.service_data not in ['color_temp', 'brightness'] }}"
  #   action:
  #     - service: telegram_bot.send_message
  #       data_template:
  #         parse_mode: html
  #         message: "{{ trigger.event }}"
  #     # - service: light.turn_on
  #     #   data:
  #     #     entity_id: light.desk_lamp
  #     #     brightness_pct: 60

  - alias: light switch desk toggle
    trigger:
      - platform: device
        device_id: 3c43ca013a444ac7be79e75622ad2310
        domain: zha
        type: remote_button_short_press
        subtype: turn_on
    action:
      - service: light.toggle
        entity_id: light.desk_lamp
        data:
          transition: 0.5

  - alias: light switch desk dim up
    trigger:
      - platform: device
        device_id: 3c43ca013a444ac7be79e75622ad2310
        domain: zha
        type: remote_button_short_press
        subtype: dim_up
    condition:
      - condition: state
        entity_id: light.desk_lamp
        state: "on"
      - condition: template
        value_template: "{{ state_attr('light.desk_lamp', 'brightness') < 254 }}"
    action:
      - service: light.turn_on
        entity_id: light.desk_lamp
        data:
          brightness_step_pct: 5
          transition: 0.5

  - alias: light switch desk dim up full
    trigger:
      - platform: device
        device_id: 3c43ca013a444ac7be79e75622ad2310
        domain: zha
        type: remote_button_short_press
        subtype: dim_up
    condition:
      - condition: state
        entity_id: light.desk_lamp
        state: "on"
      - condition: template
        value_template: "{{ state_attr('light.desk_lamp', 'brightness') >= 254 }}"
    action:
      - service: light.turn_on
        entity_id: light.desk_lamp
        data:
          flash: short

  - alias: light switch desk dim down
    trigger:
      - platform: device
        device_id: 3c43ca013a444ac7be79e75622ad2310
        domain: zha
        type: remote_button_short_press
        subtype: dim_down
    condition:
      - condition: state
        entity_id: light.desk_lamp
        state: "on"
    action:
      - service: light.turn_on
        entity_id: light.desk_lamp
        data:
          brightness_step_pct: -5
          transition: 0.5

  - alias: light bathroom motion
    # If motion is detected within the delay,
    # we restart the script.
    mode: restart
    max_exceeded: silent
    trigger:
      platform: state
      entity_id: binary_sensor.bathroom_motion
      # from: "off"
      to: "on"
    condition:
      - condition: template
        value_template: "{{ state_attr('sun.sun', 'elevation') <= 8.0 }}"
    action:
      - service: script.bathroom_light_toggle
        data:
          service: turn_on
      - wait_for_trigger:
          platform: state
          entity_id: binary_sensor.bathroom_motion
          from: "on"
          to: "off"
      - delay: "00:10:00" # turn off after motion timeout
      - service: script.bathroom_light_toggle
        data:
          service: turn_off
