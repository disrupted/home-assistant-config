homeassistant:
  customize_glob:
    script.scene_*:
      icon: mdi:vanish
    automation.scene_*:
      icon: mdi:vanish
    automation.hue_*:
      icon: mdi:vanish
  customize:
    group.scenes_day:
      icon: mdi:white-balance-sunny
    group.scenes_night:
      icon: mdi:weather-night
    scene.daytime:
      icon: mdi:white-balance-sunny
    scene.away:
      icon: mdi:account-off
    scene.bright:
      icon: mdi:spotlight
    scene.normal:
      icon: mdi:lamp
    scene.sunset:
      icon: mdi:weather-sunset
    scene.comfy:
      icon: mdi:sofa
    scene.dim:
      icon: mdi:theater
    scene.bedtime:
      icon: mdi:sleep
    scene.night:
      icon: mdi:weather-night
    # scene.nightlight:
    #   icon: mdi:candle
    group.scene:
      icon: mdi:auto-fix

group:
  all_scenes:
    name: all Scenes
    icon: mdi:vanish
    entities:
      - scene.daytime
      - scene.sunset
      - scene.normal
      - scene.comfy
      - scene.dim
      - scene.undim
      - scene.bedtime
      - scene.night
      - scene.away

scene:
  - name: Normal
    entities:
      light.floor_lamp:
        state: "on"
        brightness: 255
      light.reading_lamp:
        state: "on"
        brightness: 255
      light.spots:
        state: "on"
        brightness: 180

  - name: Sunset
    entities:
      automation.light_adaptive_apply:
        state: on
      light.floor_lamp:
        state: "on"
        brightness: 255
        color_temp: 210
      light.reading_lamp:
        state: "on"
        brightness: 255
        color_temp: 210
      light.spots:
        state: "on"
        brightness: 180
        color_temp: 210

  - name: Sunset Desk
    entities:
      light.desk_lamp:
        state: "on"
        brightness: 102
        color_temp: 210

  - name: Dim
    entities:
      # switch.adaptive_lighting_bed:
      #   state: "off"
      # switch.adaptive_lighting_bed_no_brightness:
      #   state: "on"
      light.floor_lamp:
        state: "on"
        brightness: 38
      light.reading_lamp:
        state: "off"
      light.desk_lamp:
        state: "off"
      light.candle:
        state: "on"
        brightness: 255
        effect: Flicker
      light.spots:
        state: "on"
        brightness: 25

  - name: Undim
    entities:
      # switch.adaptive_lighting_bed:
      #   state: "on"
      light.floor_lamp:
        state: "on"
        brightness: 168
      light.spots:
        state: "on"
        brightness: 128

  - name: Comfy
    entities:
      light.floor_lamp:
        state: "on"
        brightness: 150
      light.reading_lamp:
        state: "on"
        brightness: 92
      light.spots:
        state: "on"
        brightness: 115
      light.desk_lamp:
        state: "off"

  - name: Bedtime
    entities:
      # switch.adaptive_lighting_floor:
      #   state: "off"
      light.floor_lamp:
        state: "on"
        brightness: 51
        kelvin: 2200
      # switch.adaptive_lighting_bed:
      #   state: "off"
      # switch.adaptive_lighting_bed_no_brightness:
      #   state: "off"
      light.bedroom_ceiling:
        state: "on"
        # profile: bedtime
        xy_color: [0.656, 0.34]
        brightness: 15
        # flash: long
      light.desk_lamp:
        state: "off"
        # brightness: 50
        # flash: long

  - name: Daytime
    entities:
      light.floor_lamp:
        state: "on"
        brightness: 255
        # kelvin: 4000

  - name: Night
    entities:
      media_player.google_home:
        state: paused
      media_player.sonos_kitchen:
        state: paused
      switch.amp:
        state: "off"
      switch.tv:
        state: "off"
      light.all:
        state: "off"
      # switch.adaptive_lighting_bed:
      #   state: "on"

  # - name: Nightlight
  #   entities:
  #     light.bedroom_ceiling:
  #       state: "on"
  #       brightness: 1
  #       rgb_color: [255, 0, 0]

  - name: Away
    entities:
      media_player.google_home:
        state: paused
      media_player.sonos_kitchen:
        state: paused
      light.all:
        state: "off"
      light.candle:
        state: "off"
      media_player.apple_tv:
        state: paused
      switch.amp:
        state: "off"
      media_player.tv:
        state: "off"
      media_player.ps4:
        state: "off"
      fan.bathroom:
        state: "off"

  - name: "OFF"
    entities:
      light.all:
        state: "off"
      light.candle:
        state: "off"

input_select:
  scene:
    name: Scene
    icon: mdi:auto-fix
    options:
      - Select
      - Max
      - Daytime
      - Sunset
      - Normal
      - Dim
      - Comfy
      - Bedtime
      - Night
      # - Nightlight
      - Away
      - "OFF"
    # initial: 'Select'

input_number:
  scene_brightness:
    name: Brightness
    icon: mdi:contrast-box
    initial: 255
    min: 0
    max: 255
    step: 1

  scene_color_temp:
    name: Color Temperature
    icon: mdi:contrast-box
    initial: 300
    min: 153
    max: 454
    step: 1

automation:
  - id: scene_selection
    alias: scene_selection
    trigger:
      platform: state
      entity_id: input_select.scene
    condition:
      condition: template
      value_template: "{{ not is_state('input_select.scene', 'Select') }}"
    action:
      - service: script.scene
        data_template:
          scene: "scene.{{ trigger.to_state.state.replace(' ', '_').replace('&', 'and') | lower }}"
          transition: 2

  - id: scene_event
    alias: scene_event
    trigger:
      - platform: event
        event_type: call_service
        event_data:
          domain: scene
          service: turn_on
          # service_data:
          #   entity_id: [scene.test]
    # condition:
    #   - condition: template
    #     value_template: '{{ trigger.event.data.service_data.entity_id[0] | length > 1 }}'
    action:
      # - service: telegram_bot.send_message
      #   data_template:
      #     parse_mode: html
      #     disable_notification: yes
      #     message: >
      #       DEBUG Scene call registered: {{ trigger.event.data.service_data.entity_id[0] }}
      # - service: persistent_notification.create
      #   data_template:
      #     title: "DEBUG single"
      #     message: >-
      #       {% if trigger.event.data.service_data.entity_id | length < 6 %}{% set entity = trigger.event.data.service_data.entity_id[0] %}{% else %}{% set entity = trigger.event.data.service_data.entity_id %}{% endif %}{% set id = entity.split('.')[1] %}{{ states.scene[id].attributes.friendly_name }}

      # {% for entity in trigger.event.data.service_data.entity_id %}{{ entity.split('.')[1] }}{% endfor %}

      # {{ trigger.event.data.service_data.entity_id | length }}

      # {% if trigger.event.data.service_data.entity_id | length > 1 %}{% for entity in trigger.event.data.service_data["entity_id"] %} {{ entity }} {% endfor %}{% endif %}
      # {{ trigger.event.data.service_data["entity_id"][0] }}
      # - service: persistent_notification.create
      #   data_template:
      #     title: "DEBUG array"
      #     message: >
      #       {% set id = trigger.event.data.service_data.entity_id[0].split('.')[1] %}{{ states.scene[id].attributes.friendly_name }}
      # - service: hue.hue_activate_scene
      #   data_template:
      #     group_name: 'All'
      #     scene_name: >
      #       {% if trigger.event.data.service_data.entity_id | length < 6 %}{% set entity = trigger.event.data.service_data.entity_id[0] %}{% else %}{% set entity = trigger.event.data.service_data.entity_id %}{% endif %}{% set id = entity.split('.')[1] %}{{ states.scene[id].attributes.friendly_name }}
      - service: script.scene_set_input_select
        data_template:
          entity: >
            {% if trigger.event.data.service_data.entity_id | length < 6 %}{{ trigger.event.data.service_data.entity_id[0] }}{% else %}{{ trigger.event.data.service_data.entity_id }}{% endif %}
          name: >-
            {% if trigger.event.data.service_data.entity_id | length < 6 %}{% set entity = trigger.event.data.service_data.entity_id[0] %}{% else %}{% set entity = trigger.event.data.service_data.entity_id %}{% endif %}{% set id = entity.split('.')[1] %}{{ states.scene[id].attributes.friendly_name }}
          id: "{{ trigger.event.data.service_data.service_call_id }}"
        # {% set id = trigger.event.data.service_data.entity_id %}{% set a, b = id.split('.') %}{{ states[a][b].attributes.friendly_name }}

  - id: scene_brightness_change
    alias: scene_brightness_change
    trigger:
      platform: state
      entity_id: input_number.scene_brightness
    action:
      - service: light.turn_on
        data_template:
          entity_id: >
            {% set lights = expand(state_attr('light.livingroom', 'entity_id')) | selectattr('state','eq','on') | map(attribute='entity_id') | list %}
            {{ lights }}
          brightness: "{{ states('input_number.scene_brightness') | int }}"
          transition: 1

  - id: scene_color_temp_change
    alias: scene_color_temp_change
    trigger:
      platform: state
      entity_id: input_number.scene_color_temp
    action:
      - service: light.turn_on
        data_template:
          entity_id: >
            {% set lights = expand(state_attr('light.livingroom', 'entity_id')) | selectattr('state','eq','on') | map(attribute='entity_id') | list %}
            {{ lights }}
          color_temp: "{{ states('input_number.scene_color_temp') | int }}"
          transition: 1
