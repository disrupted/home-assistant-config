homeassistant:
  customize_glob:
    sensor.traveltime_*:
      icon: mdi:subway
    automation.device_tracker_*:
      icon: mdi:crosshairs-gps
    automation.icloud_*:
      icon: mdi:apple-icloud
  customize:
    # sensor.traveltime_home_to_work:
    #   friendly_name: → Work
    sensor.traveltime_home_to_uni:
      friendly_name: → Uni
    sensor.traveltime_location_to_home:
      friendly_name: → Home
    automation.device_tracker_coming_home:
      icon: mdi:home-import-outline
    automation.device_tracker_leaving_home:
      icon: mdi:home-export-outline # mdi:exit-run
    sensor.icloud_last_update:
      icon: mdi:update

foursquare:
  access_token: !secret api_access_token_foursquare
  push_secret: !secret api_push_secret_foursquare

input_boolean:
  present:
    name: present
    icon: mdi:login
  presence_salomon:
    name: Salomon Home
  presence_guest:
    name: Guest Home

zone:
  - name: Home
    latitude: !secret location_home_lat
    longitude: !secret location_home_lon
    radius: !secret location_home_radius
    icon: mdi:home

sensor:
  - platform: mqtt_room
    name: Presence iPhone
    device_id: !secret presence_iphone_device_id
    state_topic: !secret presence_iphone_mqtt_topic
    timeout: 10
    away_timeout: 120
  - platform: mqtt_room
    name: Presence Apple Watch
    device_id: !secret presence_apple_watch_device_id
    state_topic: !secret presence_apple_watch_mqtt_topic
    timeout: 10
    away_timeout: 120

  - platform: history_stats
    name: time outside Salomon
    entity_id: person.salomon
    state: "not_home"
    type: time
    start: >
      {% if state_attr('sun.sun', 'elevation') < 0 and is_state_attr('sun.sun', 'rising', True) %}{{ now().replace(hour=0, minute=0, second=0) }}
      {% else %}{{ as_timestamp((as_timestamp(now()) | timestamp_custom('%Y-%m-%dT')) + (as_timestamp(state_attr('sun.sun', 'next_dawn')) | timestamp_custom('%H:%M:%S+00:00', False))) }}
      {% endif %}
    end: >
      {% if state_attr('sun.sun', 'elevation') < 0 and is_state_attr('sun.sun', 'rising', True) %}{{ now().replace(hour=0, minute=0, second=0) }}
      {% else %}{{ as_timestamp((as_timestamp(now()) | timestamp_custom('%Y-%m-%dT')) + (as_timestamp(state_attr('sun.sun', 'next_dusk')) | timestamp_custom('%H:%M:%S+00:00', False))) }}
      {% endif %}

proximity:
  home:
    devices:
      - person.salomon
    # tolerance: 50
  home_salomon:
    devices:
      - person.salomon

automation:
  - id: device_tracker_new_device
    alias: device_tracker new device
    trigger:
      platform: event
      event_type: device_tracker_new_device
    action:
      - service: telegram_bot.send_message
        data_template:
          parse_mode: html
          title: New device discovered
          message: >
            {{trigger.event.data.host_name}}
            ({{trigger.event.data.entity_id}})
              DEBUG: {{trigger.event.data}}

  - alias: device_tracker Update presence device tracker
    id: device_tracker_presence_refresh
    mode: queued
    trigger:
      - platform: state
        entity_id: sensor.presence_apple_watch
      - platform: state
        entity_id: sensor.presence_iphone
    condition:
      - condition: template
        value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"
    action:
      - service: device_tracker.see
        data_template:
          dev_id: "{{ trigger.entity_id | replace('sensor.', '') }}"
          location_name: "{{ 'home' if is_state(trigger.entity_id, 'home') else 'not_home' }}"

  - alias: device_tracker coming Home
    id: device_tracker_coming_home
    trigger:
      platform: state
      entity_id: group.awesome_people
      to: "home"
    condition:
      - condition: state
        entity_id: input_boolean.present
        state: "off"
    action:
      - if:
          - alias: "Door is closed"
            condition: state
            entity_id: binary_sensor.entrance_door
            state: "off"
        then:
          - alias: "Wait until person enters"
            wait_template: "{{ is_state('binary_sensor.entrance_door', 'on') }}"
      - service: homeassistant.turn_on
        entity_id: input_boolean.present

  - alias: device_tracker leaving Home
    id: device_tracker_leaving_home
    trigger:
      - platform: state
        entity_id: group.awesome_people
        from: "home"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.present
      - if:
          - condition: state
            entity_id: automation.device_tracker_coming_home
            state: "on"
        then:
          # cancel automation waiting for door to open
          - service: automation.turn_off
            entity_id: automation.device_tracker_coming_home
          - service: automation.turn_on
            entity_id: automation.device_tracker_coming_home

  - alias: Coming Home lights
    id: coming_home_light
    trigger:
      platform: state
      entity_id: input_boolean.present
      from: "off"
      to: "on"
    condition:
      - condition: state
        entity_id: light.livingroom
        state: "off"
      - condition: or
        conditions:
          - condition: sun
            after: sunset
            after_offset: "-2:00:00"
          - condition: sun
            before: sunrise
    action:
      # - service: switch.turn_on
      #   entity_id:
      #     - switch.circadian_lighting_floor
      #     - switch.circadian_lighting_bed
      #     - switch.circadian_lighting_desk
      # - service: scene.turn_on
      #   data:
      #     entity_id: scene.normal
      #     transition: 1
      - service: script.scene
        data:
          scene: normal
          transition: 1

  - alias: Coming Home unlock door
    id: coming_home_unlock_door
    mode: single # single or restart
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: sensor.presence_apple_watch
        from: "not_home"
        to: "home"
      - platform: state
        entity_id: sensor.presence_iphone
        from: "not_home"
        to: "home"
    condition:
      - alias: "Door is closed"
        condition: state
        entity_id: binary_sensor.entrance_door
        state: "off"
      - condition: state
        entity_id: input_boolean.sleeping
        state: "off"
    action:
      - alias: "Set up variables for the actions"
        variables:
          # Including an id in the action allows us to identify this script run
          # and not accidentally trigger for other notification actions
          action_open: "{{ 'OPEN_' ~ context.id }}"
      - alias: "Ask to open the door"
        service: notify.mobile_app_disrupted_iphone
        data:
          message: "Welcome Home"
          data:
            tag: "door"
            push:
              thread-id: security
              interruption-level: time-sensitive
            actions:
              - action: "{{ action_open }}"
                title: Open Door
      - alias: "Wait for a response"
        wait_for_trigger:
          - platform: event
            event_type: mobile_app_notification_action
            event_data:
              # waiting for the specific action avoids accidentally continuing
              # for another script/automation's notification action
              action: "{{ action_open }}"
        continue_on_timeout: true
        timeout:
          minutes: 5
      - if:
          - "{{ wait.trigger != none }}" # wait_for_trigger completed
        then: # not timed out
          - alias: "Perform the action"
            choose:
              - conditions: "{{ wait.trigger.event.data.action == action_open }}"
                sequence:
                  - service: script.door_open
      - service: notify.mobile_app_disrupted_iphone
        data:
          message: "clear_notification"
          data:
            tag: "door"

  - alias: Lock notify
    id: lock_notify
    mode: restart
    max_exceeded: silent
    trigger:
      platform: state
      entity_id: lock.door_lock
    action:
      - service: notify.mobile_app_disrupted_iphone
        data_template:
          data:
            tag: "door-state"
            push:
              thread-id: security
              interruption-level: time-sensitive
          message: Door is {{ trigger.to_state.state }}

  - alias: Leaving Home
    id: leaving_home
    trigger:
      platform: state
      entity_id: input_boolean.present
      from: "on"
      to: "off"
    action:
      - service: lock.lock
        entity_id: lock.door_lock
      - service: scene.turn_on
        entity_id: scene.away

  - alias: device_tracker notify someone arrives or leaves home
    trigger:
      platform: state
      entity_id:
        - person.salomon
        - device_tracker.disrupted_iphone_wifi
    condition:
      - condition: template
        value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"
      - condition: numeric_state
        entity_id: sensor.ha_uptime
        above: 15
    action:
      - service: telegram_bot.send_message
        data_template:
          disable_notification: true
          message: "{{ trigger.to_state.attributes.friendly_name }} {% if trigger.to_state.state == 'home' %}arrived home{% elif trigger.from_state.state == 'home' and trigger.to_state.state == 'not_home' %}left home{% elif trigger.to_state.state != 'not_home' %}arrived at {{ trigger.to_state.state }}{% elif trigger.to_state.state == 'not_home' %}left {{ trigger.from_state.state }}{% endif %}.{% if trigger.to_state.attributes.source_type != null %} (source: {{ trigger.to_state.attributes.source_type }}){% endif %}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ is_state('binary_sensor.disrupted_mba_active', 'on') }}"
          - condition: template
            value_template: "{{ is_state('device_tracker.disrupted_mba', 'home') }}"
      - service: notify.mobile_app_disrupted_mba
        data_template:
          message: "{{ trigger.to_state.attributes.friendly_name }} {% if trigger.to_state.state == 'home' %}arrived home{% elif trigger.from_state.state == 'home' and trigger.to_state.state == 'not_home' %}left home{% elif trigger.to_state.state != 'not_home' %}arrived at {{ trigger.to_state.state }}{% elif trigger.to_state.state == 'not_home' %}left {{ trigger.from_state.state }}{% endif %}.{% if trigger.to_state.attributes.source_type != null %} (source: {{ trigger.to_state.attributes.source_type }}){% endif %}"

  - alias: device_tracker iphone request update Salomon
    id: device_tracker_iphone_request_update_salomon
    trigger:
      - platform: state
        entity_id: device_tracker.disrupted_iphone_wifi
        from: "home"
        to: "not_home"
    condition:
      - condition: state
        entity_id: device_tracker.disrupted_iphone
        state: "home"
      # - condition: template
      #   value_template: "{{ not is_state('device_tracker.disrupted_iphone', 'unavailable') }}"
      - condition: template
        value_template: "{{ as_timestamp(now()) - as_timestamp(states.device_tracker.disrupted_iphone.last_updated) > 60 }}"
    action:
      - service: notify.telegram
        data:
          message: "requesting location update from disrupted-iPhone"
      - service: script.iphone_update_salomon

  - alias: device_tracker refresh health data at end of day
    trigger:
      platform: time
      at: "23:55:00"
    action:
      - service: script.iphone_update_salomon

  - alias: device_tracker proximity coming back
    trigger:
      platform: numeric_state
      entity_id: proximity.home
      above: 0.5
      below: 1.5
    action:
      - service: telegram_bot.send_message
        data_template:
          message: >
            Are you coming back home? (dir of travel: {{ state_attr('proximity.home', 'dir_of_travel') }})
